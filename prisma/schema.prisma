generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  password            String
  firstName           String
  lastName            String
  middleName          String?
  role                Role              @default(STUDENT)
  studentId           String?           @unique
  employeeId          String?           @unique
  status              UserStatus        @default(PENDING)
  enrollmentDocuments EnrollmentDocument[]
  approvedBy          String?
  approvedAt          DateTime?
  rejectionReason     String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  teachingClasses     Class[]           @relation("TeacherClasses")
  assignedSubjects    Subject[]         @relation("AssignedSubjects")
  subjectAssignments  SubjectAssignment[]
  enrollments         Enrollment[]
  grades              Grade[]
  approvedSubmissions GradeSubmission[] @relation("AdminApprovals")
  gradeSubmissions    GradeSubmission[] @relation("TeacherSubmissions")

  @@index([email])
  @@index([studentId])
  @@index([employeeId])
  @@index([status])
}

model Department {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  classes     Class[]
  subjects    Subject[]

  @@index([code])
}

model DepartmentHead {
  id          String    @id @default(cuid())
  name        String
  title       String?
  email       String?
  phone       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model GlobalSettings {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([key])
}

model SchoolYear {
  id               String            @id @default(cuid())
  year             String
  semester         Semester
  isActive         Boolean           @default(false)
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  classes          Class[]
  enrollments      Enrollment[]
  gradeSubmissions GradeSubmission[]
  subjects         Subject[]

  @@unique([year, semester])
  @@index([isActive])
}

model Subject {
  id           String       @id @default(cuid())
  code         String       @unique
  name         String
  description  String?
  units        Int          @default(3)
  isOpen       Boolean      @default(false)
  schoolYearId String?
  departmentId String?
  assignedTeacherId String?  // Teacher assigned to teach this subject
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  classes      Class[]
  enrollments  Enrollment[]
  department   Department?  @relation(fields: [departmentId], references: [id])
  schoolYear   SchoolYear?  @relation(fields: [schoolYearId], references: [id])
  assignedTeacher User?     @relation("AssignedSubjects", fields: [assignedTeacherId], references: [id])
  subjectAssignments SubjectAssignment[]

  @@index([code])
  @@index([isOpen])
  @@index([schoolYearId])
  @@index([departmentId])
  @@index([assignedTeacherId])
}

model SubjectAssignment {
  id        String   @id @default(cuid())
  subjectId String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher User    @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([subjectId, teacherId])
  @@index([subjectId])
  @@index([teacherId])
}

model Class {
  id               String            @id @default(cuid())
  name             String
  section          String
  isIrregular      Boolean           @default(false)
  dayAndTime       String?
  room             String?
  classSize        Int?
  departmentHead   String?
  vpAcademics      String?
  subjectId        String
  teacherId        String
  schoolYearId     String
  departmentId     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  department       Department?       @relation(fields: [departmentId], references: [id])
  schoolYear       SchoolYear        @relation(fields: [schoolYearId], references: [id])
  subject          Subject           @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher          User              @relation("TeacherClasses", fields: [teacherId], references: [id])
  enrollments      Enrollment[]
  grades           Grade[]
  gradeSubmissions GradeSubmission[]
  gradingCriteria  GradingCriteria[]

  @@unique([subjectId, section, schoolYearId])
  @@index([teacherId])
  @@index([schoolYearId])
  @@index([departmentId])
}

model GlobalGradingCriteria {
  id                   String                      @id @default(cuid())
  name                 String
  percentage           Float
  gradeTypeId          String
  order                Int                         @default(0)
  isActive             Boolean                     @default(true)
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  componentDefinitions GlobalComponentDefinition[]
  gradeType            GradeType                   @relation(fields: [gradeTypeId], references: [id], onDelete: Cascade)

  @@index([gradeTypeId])
  @@index([isActive])
}

model GradeType {
  id               String                  @id @default(cuid())
  name             String
  description      String?
  percentage       Float                   @default(0)
  order            Int                     @default(0)
  isActive         Boolean                 @default(true)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  globalCriteria   GlobalGradingCriteria[]
  grades           Grade[]
  gradeSubmissions GradeSubmission[]

  @@index([isActive])
}

model GlobalComponentDefinition {
  id              String                @id @default(cuid())
  criteriaId      String
  name            String
  maxScore        Float
  order           Int                   @default(0)
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  componentScores ComponentScore[]
  criteria        GlobalGradingCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)

  @@index([criteriaId])
  @@index([isActive])
}

model GradingCriteria {
  id                   String                @id @default(cuid())
  classId              String
  name                 String
  percentage           Float
  isMidterm            Boolean               @default(true)
  order                Int                   @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  componentDefinitions ComponentDefinition[]
  class                Class                 @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([isMidterm])
}

model ComponentDefinition {
  id         String          @id @default(cuid())
  criteriaId String
  name       String
  maxScore   Float
  order      Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  criteria   GradingCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)

  @@index([criteriaId])
}

model Enrollment {
  id           String          @id @default(cuid())
  studentId    String
  subjectId    String
  classId      String?
  schoolYearId String
  enrolledAt   DateTime        @default(now())
  status       EnrollmentStatus @default(PENDING)
  approvedBy   String?
  approvedAt   DateTime?
  rejectedBy   String?
  rejectedAt   DateTime?
  rejectionReason String?
  class        Class?          @relation(fields: [classId], references: [id])
  schoolYear   SchoolYear      @relation(fields: [schoolYearId], references: [id])
  student      User            @relation(fields: [studentId], references: [id])
  subject      Subject         @relation(fields: [subjectId], references: [id])
  grades       Grade[]

  @@unique([studentId, subjectId, schoolYearId])
  @@index([studentId])
  @@index([classId])
  @@index([schoolYearId])
  @@index([status])
}

model Grade {
  id              String           @id @default(cuid())
  enrollmentId    String
  studentId       String
  classId         String
  gradeTypeId     String
  grade           Float?
  remarks         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  componentScores ComponentScore[]
  class           Class            @relation(fields: [classId], references: [id])
  enrollment      Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  gradeType       GradeType        @relation(fields: [gradeTypeId], references: [id])
  student         User             @relation(fields: [studentId], references: [id])

  @@unique([enrollmentId, gradeTypeId])
  @@index([studentId])
  @@index([classId])
  @@index([gradeTypeId])
}

model ComponentScore {
  id                   String                    @id @default(cuid())
  gradeId              String
  globalComponentDefId String
  score                Float
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  globalComponentDef   GlobalComponentDefinition @relation(fields: [globalComponentDefId], references: [id])
  grade                Grade                     @relation(fields: [gradeId], references: [id], onDelete: Cascade)

  @@unique([gradeId, globalComponentDefId])
  @@index([gradeId])
  @@index([globalComponentDefId])
}

model GradeSubmission {
  id           String                @id @default(cuid())
  classId      String
  teacherId    String
  schoolYearId String
  gradeTypeId  String
  submittedAt  DateTime              @default(now())
  status       GradeSubmissionStatus @default(PENDING)
  approvedBy   String?
  approvedAt   DateTime?
  comments     String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  approver     User?                 @relation("AdminApprovals", fields: [approvedBy], references: [id])
  class        Class                 @relation(fields: [classId], references: [id])
  gradeType    GradeType             @relation(fields: [gradeTypeId], references: [id])
  schoolYear   SchoolYear            @relation(fields: [schoolYearId], references: [id])
  teacher      User                  @relation("TeacherSubmissions", fields: [teacherId], references: [id])

  @@index([classId])
  @@index([teacherId])
  @@index([status])
  @@index([schoolYearId])
  @@index([gradeTypeId])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GradeSubmissionStatus {
  PENDING
  APPROVED
  DECLINED
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model EnrollmentDocument {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int
  documentType DocumentType
  uploadedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([documentType])
}

enum DocumentType {
  ENROLLMENT_FORM
  ID_PHOTO
  TRANSCRIPT
  BIRTH_CERTIFICATE
  OTHER
}

enum Semester {
  FIRST
  SECOND
  SUMMER
}
