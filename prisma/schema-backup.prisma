// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum GradeSubmissionStatus {
  PENDING
  APPROVED
  DECLINED
}

enum Semester {
  FIRST
  SECOND
  SUMMER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  middleName    String?
  role          Role      @default(STUDENT)
  studentId     String?   @unique
  employeeId    String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  teachingClasses     Class[]           @relation("TeacherClasses")
  enrollments         Enrollment[]
  grades              Grade[]
  gradeSubmissions    GradeSubmission[] @relation("TeacherSubmissions")
  approvedSubmissions GradeSubmission[] @relation("AdminApprovals")

  @@index([email])
  @@index([studentId])
  @@index([employeeId])
}

model SchoolYear {
  id          String    @id @default(cuid())
  year        String    // e.g., "2024-2025"
  semester    Semester
  isActive    Boolean   @default(false)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  subjects          Subject[]
  classes           Class[]
  enrollments       Enrollment[]
  gradeSubmissions  GradeSubmission[]

  @@unique([year, semester])
  @@index([isActive])
}

model Subject {
  id              String      @id @default(cuid())
  code            String      @unique
  name            String
  description     String?
  units           Int         @default(3)
  isOpen          Boolean     @default(false)
  schoolYearId    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  schoolYear      SchoolYear?  @relation(fields: [schoolYearId], references: [id])
  classes         Class[]
  enrollments     Enrollment[]

  @@index([code])
  @@index([isOpen])
  @@index([schoolYearId])
}

model Class {
  id                String      @id @default(cuid())
  name              String      // e.g., "BSIT 3A"
  section           String
  isIrregular       Boolean     @default(false)
  subjectId         String
  teacherId         String
  schoolYearId      String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  subject           Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher           User         @relation("TeacherClasses", fields: [teacherId], references: [id])
  schoolYear        SchoolYear   @relation(fields: [schoolYearId], references: [id])
  enrollments       Enrollment[]
  gradingCriteria   GradingCriteria[]
  grades            Grade[]
  gradeSubmissions  GradeSubmission[]

  @@unique([subjectId, section, schoolYearId])
  @@index([teacherId])
  @@index([schoolYearId])
}

model GradingCriteria {
  id                String    @id @default(cuid())
  classId           String
  name              String    // e.g., "Quizzes", "Class Standing", "Major Exam"
  percentage        Float     // e.g., 40.0 for 40%
  isMidterm         Boolean   @default(true) // true for midterm, false for final
  order             Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  class             Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  gradeComponents   GradeComponent[]

  @@index([classId])
  @@index([isMidterm])
}

model Enrollment {
  id              String      @id @default(cuid())
  studentId       String
  subjectId       String
  classId         String?
  schoolYearId    String
  enrolledAt      DateTime    @default(now())
  status          String      @default("ENROLLED") // ENROLLED, DROPPED, COMPLETED

  // Relations
  student         User        @relation(fields: [studentId], references: [id])
  subject         Subject     @relation(fields: [subjectId], references: [id])
  class           Class?      @relation(fields: [classId], references: [id])
  schoolYear      SchoolYear  @relation(fields: [schoolYearId], references: [id])
  grades          Grade[]

  @@unique([studentId, subjectId, schoolYearId])
  @@index([studentId])
  @@index([classId])
  @@index([schoolYearId])
}

model Grade {
  id              String      @id @default(cuid())
  enrollmentId    String
  studentId       String
  classId         String
  isMidterm       Boolean     @default(true)
  midtermGrade    Float?
  finalGrade      Float?
  overallGrade    Float?
  remarks         String?     // PASSED, FAILED, INC, etc.
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  enrollment      Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  student         User        @relation(fields: [studentId], references: [id])
  class           Class       @relation(fields: [classId], references: [id])
  components      GradeComponent[]

  @@unique([enrollmentId, isMidterm])
  @@index([studentId])
  @@index([classId])
}

model GradeComponent {
  id                  String      @id @default(cuid())
  gradeId             String
  criteriaId          String
  score               Float       // Actual score
  maxScore            Float       // Maximum possible score
  percentage          Float       // Calculated percentage for this component
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations
  grade               Grade       @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  criteria            GradingCriteria @relation(fields: [criteriaId], references: [id])

  @@unique([gradeId, criteriaId])
  @@index([gradeId])
  @@index([criteriaId])
}

model GradeSubmission {
  id              String                @id @default(cuid())
  classId         String
  teacherId       String
  schoolYearId    String
  submittedAt     DateTime              @default(now())
  status          GradeSubmissionStatus @default(PENDING)
  approvedBy      String?
  approvedAt      DateTime?
  comments        String?
  isMidterm       Boolean               @default(false)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  class           Class                 @relation(fields: [classId], references: [id])
  teacher         User                  @relation("TeacherSubmissions", fields: [teacherId], references: [id])
  schoolYear      SchoolYear            @relation(fields: [schoolYearId], references: [id])
  approver        User?                 @relation("AdminApprovals", fields: [approvedBy], references: [id])

  @@index([classId])
  @@index([teacherId])
  @@index([status])
  @@index([schoolYearId])
}

